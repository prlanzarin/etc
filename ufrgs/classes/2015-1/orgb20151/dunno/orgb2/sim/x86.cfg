[ General ]
  Frequency = 2000
  Cores = 1
;  Cores = <num_cores> (Default = 1)
;      Number of cores.
  Threads = 2

  FastForward = 0
;  FastForward = <num_inst> (Default = 0)
;      Number of x86 instructions to run with a fast functional simulation before
;      the architectural simulation starts.
;  ContextSwitch = t
;  ContextSwitch = {t|f} (Default = t)
;      Allow context switches in computing nodes. If this option is set to false,
;      the maximum number of contexts that can be run is limited by the number of
;      computing nodes; if a contexts spawns a child that cannot be allocated to
;      a free hardware thread, the simulation will stop with an error message.
  ContextQuantum = 100k
;  ContextQuantum = <cycles> (Default = 100k)
;      If ContextSwitch is true, maximum number of cycles that a context can occupy
;      a CPU hardware thread before it is replaced by other pending context.
  ThreadQuantum = 1k
;  ThreadQuantum = <cycles> (Default = 1k)
;      For multithreaded processors (Threads > 1) configured as coarse-grain multi-
;      threading (FetchKind = SwitchOnEvent), number of cycles in which instructions
;      are fetched from the same thread before switching.
  ThreadSwitchPenalty = 0
;  ThreadSwitchPenalty = <cycles> (Default = 0)
;      For coarse-grain multithreaded processors (FetchKind = SwitchOnEvent), number
;      of cycles that the fetch stage stalls after a thread switch.
  RecoverKind = Writeback
;  RecoverKind = {Writeback|Commit} (Default = Writeback)
;      On branch misprediction, stage in the execution of the mispredicted branch
;      when processor recovery is triggered.
  RecoverPenalty = 0
;  RecoverPenalty = <cycles> (Default = 0)
;      Number of cycles that the fetch stage gets stalled after a branch
;      misprediction.
;  PageSize = 6096
;  PageSize = <size> (Default = 4kB)
;      Memory page size in bytes.
  ProcessPrefetchHints = t
;  ProcessPrefetchHints = {t|f} (Default = True)
;      If specified as false, the cpu will ignore any prefetch hints/instructions.
  PrefetchHistorySize = 10
;  PrefetchHistorySize = <size> (Default = 10)
;      Number of past prefetches to keep track of, so as to avoid redundant prefetches
;      from being issued from the cpu to the cache module.

[ Pipeline ]

  FetchKind = TimeSlice
;  FetchKind = {Shared|TimeSlice|SwitchOnEvent} (Default = TimeSlice)
;      Policy for fetching instruction from different threads. A shared fetch stage
;      fetches instructions from different threads in the same cycle; a time-slice
;      fetch switches between threads in a round-robin fashion; option SwitchOnEvent
;      switches thread fetch on long-latency operations or thread quantum expiration.
  DecodeWidth = 4
;  DecodeWidth = <num_inst> (Default = 4)
;      Number of x86 instructions decoded per cycle.
  DispatchKind = TimeSlice
;  DispatchKind = {Shared|TimeSlice} (Default = TimeSlice)
;      Policy for dispatching instructions from different threads. If shared,
;      instructions from different threads are dispatched in the same cycle. Otherwise,
;      instruction dispatching is done in a round-robin fashion at a cycle granularity.
  DispatchWidth = 4
;  DispatchWidth = <num_inst> (Default = 4)
;      Number of microinstructions dispatched per cycle.
  IssueKind = TimeSlice
;  IssueKind = {Shared|TimeSlice} (Default = TimeSlice)
;      Policy for issuing instructions from different threads. If shared, instructions
;      from different threads are issued in the same cycle; otherwise, instruction issue
;      is done round-robin at a cycle granularity.
  IssueWidth = 4
;  IssueWidth = <num_inst> (Default = 4)
;      Number of microinstructions issued per cycle.
  CommitKind = Shared
;  CommitKind = {Shared|TimeSlice} (Default = Shared)
;      Policy for committing instructions from different threads. If shared,
;      instructions from different threads are committed in the same cycle; otherwise,
;      they commit in a round-robin fashion.
  CommitWidth = 4
;  CommitWidth = <num_inst> (Default = 4)
;      Number of microinstructions committed per cycle.
  OccupancyStats = f
;  OccupancyStats = {t|f} (Default = False)
;      Calculate structures occupancy statistics. Since this computation requires
;      additional overhead, the option needs to be enabled explicitly. These statistics
;      will be attached to the CPU report.

[ Queues ]

  FetchQueueSize = 64
;  FetchQueueSize = <bytes> (Default = 64)
;      Size of the fetch queue given in bytes.
  UopQueueSize = 32
;  UopQueueSize = <num_uops> (Default = 32)
;      Size of the uop queue size, given in number of uops.
  RobKind = Private
;  RobKind = {Private|Shared} (Default = Private)
;      Reorder buffer sharing among hardware threads.
  RobSize = 64
;  RobSize = <num_uops> (Default = 64)
;      Reorder buffer size in number of microinstructions (if private, per-thread size).
  IqKind = Private
;  IqKind = {Private|Shared} (Default = Private)
;      Instruction queue sharing among threads.
  IqSize = 40
;  IqSize = <num_uops> (Default = 40)
;      Instruction queue size in number of uops (if private, per-thread IQ size).
  LsqKind = Private
;  LsqKind = {Private|Shared} (Default = Private)
;      Load-store queue sharing among threads.
  LsqSize = 20
;  LsqSize = <num_uops> (Default = 20)
;      Load-store queue size in number of uops (if private, per-thread LSQ size).
  RfKind = Private
;  RfKind = {Private|Shared} (Default = Private)
;      Register file sharing among threads.
  RfIntSize = 80
;  RfIntSize = <entries> (Default = 80)
;      Number of integer physical register (if private, per-thread).
  RfFpSize = 40
;  RfFpSize = <entries> (Default = 40)
;      Number of floating-point physical registers (if private, per-thread).
  RfXmmSize = 40 
;  RfXmmSize = <entries> (Default = 40)
;      Number of XMM physical registers (if private, per-thread).

[ TraceCache ]

  Present = f 
;  Present = {t|f} (Default = False)
;      If true, a trace cache is included in the model. If false, the rest of the
;      options in this section are ignored.
  Sets = 64
;  Sets = <num_sets> (Default = 64)
;      Number of sets in the trace cache.
  Assoc = 4
;  Assoc = <num_ways> (Default = 4)
;      Associativity of the trace cache. The product Sets * Assoc is the total
;      number of traces that can be stored in the trace cache.
  TraceSize = 16
;  TraceSize = <num_uops> (Default = 16)
;      Maximum size of a trace of uops.
  BranchMax = 3
;  BranchMax = <num_branches> (Default = 3)
;      Maximum number of branches contained in a trace.
  QueueSize = 32
;  QueueSize = <num_uops> (Default = 32)
;      Size of the trace queue size in uops.

[ FunctionalUnits ]

;  The possible variables in this section follow the format
;      <func_unit>.<field> = <value>
;  where <func_unit> refers to a functional unit type, and <field> refers to a
;  property of it. Possible values for <func_unit> are:
;      IntAdd      Integer adder
;      IntMult     Integer multiplier
;      IntDiv      Integer divider
;      EffAddr     Operator for effective address computations
;      Logic       Operator for logic operations
;      FpSimple    Simple floating-point operations
;      FpAdd       Floating-point adder
;      FpMult      Floating-point multiplier
;      FpDiv       Floating-point divider
;      FpComplex   Operator for complex floating-point computations
;      XMMInt      XMM integer unit
;      XMMFloat    XMM floating-point unit
;      XMMLogic    XMM logic unit
;  Possible values for <field> are:
;      Count       Number of functional units of a given kind.
;      OpLat       Latency of the operator.
;      IssueLat    Latency since an instruction was issued until the functional
;                  unit is available for the next use. For pipelined operators,
;                  IssueLat is smaller than OpLat.

[ BranchPredictor ]

  Kind = Perfect
;  Kind = {Perfect|Taken|NotTaken|Bimodal|TwoLevel|Combined} (Default = TwoLevel)
;      Branch predictor type.
  BTB.Sets = 256
;  BTB.Sets = <num_sets> (Default = 256)
;      Number of sets in the BTB.
  BTB.Assoc = 4
;  BTB.Assoc = <num_ways) (Default = 4)
;      BTB associativity.
  Bimod.Size = 1024
;  Bimod.Size = <entries> (Default = 1024)
;      Number of entries of the bimodal branch predictor.
  Choice.Size = 1024
;  Choice.Size = <entries> (Default = 1024)
;      Number of entries for the choice predictor.
  RAS.Size = 32
;  RAS.Size = <entries> (Default = 32)
;      Number of entries of the return address stack (RAS).
  TwoLevel.L1Size = 1
;  TwoLevel.L1Size = <entries> (Default = 1)
;      For the two-level adaptive predictor, level 1 size.
  TwoLevel.L2Size = 1024
;  TwoLevel.L2Size = <entries> (Default = 1024)
;      For the two-level adaptive predictor, level 2 size.
  TwoLevel.HistorySize = 8
;  TwoLevel.HistorySize = <size> (Default = 8)
;      For the two-level adaptive predictor, level 2 history size.

