;[General] 
;defines global parameters affecting the entire memory system.

;  PageSize = <size>  (Default = 4096)
;      Memory page size. Virtual addresses are translated into new physical
;      addresses in ascending order at the granularity of the page size.
;  PeerTransfers = <bool> (Default = transfers)
;      Whether or not transfers between peer caches are used.
[General]

	PageSize = 4096



;[Module <name>]
;defines a generic memory module. This section is used to
;declare both caches and main memory modules accessible from CPU cores or GPU
;compute units.

;  Type = {Cache|MainMemory}  (Required)
;      Type of the memory module. From the simulation point of view, the
;      difference between a cache and a main memory module is that the former
;      contains only a subset of the data located at the memory locations it
;      serves.
;  Geometry = <geo>
;      Cache geometry, defined in a separate section of type [Geometry <geo>].
;      This variable is required for cache modules.
;  LowNetwork = <net>
;      Network connecting the module with other lower-level modules, i.e.,
;      modules closer to main memory. This variable is mandatory for caches, and
;      should not appear for main memory modules. Value <net> can refer to an
;      internal network defined in a [Network <net>] section, or to an external
;      network defined in the network configuration file.
;  LowNetworkNode = <node>
;      If 'LowNetwork' points to an external network, node in the network that
;      the module is mapped to. For internal networks, this variable should be
;      omitted.
;  HighNetwork = <net>
;      Network connecting the module with other higher-level modules, i.e.,
;      modules closer to CPU cores or GPU compute units. For highest level
;      modules accessible by CPU/GPU, this variable should be omitted.
;  HighNetworkNode = <node>
;      If 'HighNetwork' points to an external network, node that the module is
;      mapped to.
;  LowModules = <mod1> [<mod2> ...]
;      List of lower-level modules. For a cache module, this variable is required.
;      If there is only one lower-level module, it serves the entire address
;      space for the current module. If there are several lower-level modules,
;      each served a disjoint subset of the address space. This variable should
;      be omitted for main memory modules.
;  BlockSize = <size>
;      Block size in bytes. This variable is required for a main memory module.
;      It should be omitted for a cache module (in this case, the block size is
;      specified in the corresponding cache geometry section).
;  Latency = <cycles>
;      Memory access latency. This variable is required for a main memory module,
;      and should be omitted for a cache module (the access latency is specified
;      in the corresponding cache geometry section in this case).
;  Ports = <num>
;      Number of read/write ports. This variable is only allowed for a main memory
;      module. The number of ports for a cache is specified in a separate cache
;      geometry section.
;  DirectorySize <size>
;      Size of the directory in number of blocks. The size of a directory limits
;      the number of different blocks that can reside in upper-level caches. If a
;      cache requests a new block from main memory, and its directory is full, a
;      previous block must be evicted from the directory, and all its occurrences
;      in the memory hierarchy need to be first invalidated. This variable is only
;      allowed for a main memory module.
;  DirectoryAssoc = <assoc>
;      Directory associativity in number of ways. This variable is only allowed
;      for a main memory module.
;  AddressRange = { BOUNDS <low> <high> | ADDR DIV <div> MOD <mod> EQ <eq> }
;      Physical address range served by the module. If not specified, the entire
;      address space is served by the module. There are two possible formats for
;      the value of 'Range':
;      With the first format, the user can specify the lowest and highest byte
;      included in the address range. The value in <low> must be a multiple of
;      the module block size, and the value in <high> must be a multiple of the
;      block size minus 1.
;      With the second format, the address space can be split between different
;      modules in an interleaved manner. If dividing an address by <div> and
;      modulo <mod> makes it equal to <eq>, it is served by this module. The
;      value of <div> must be a multiple of the block size. When a module serves
;      only a subset of the address space, the user must make sure that the rest
;      of the modules at the same level serve the remaining address space.
;
[Module x86-l1-0]
	Type = Cache
	Geometry = x86-geo-l1
	LowNetwork = x86-net-l1-l2
	LowModules = x86-l2

[Module x86-l1-1]
	Type = Cache
	Geometry = x86-geo-l1
	LowNetwork = x86-net-l1-l2
	LowModules = x86-l2
	
[Module x86-l1-2]
	Type = Cache
	Geometry = x86-geo-l1
	LowNetwork = x86-net-l1-l2
	LowModules = x86-l2
	
;[Module x86-l1-3]
;	Type = Cache
;	Geometry = x86-geo-l1
;	LowNetwork = x86-net-l1-l2
;	LowModules = x86-l2

[Module x86-l2]
	Type = Cache
	Geometry = x86-geo-l2
	HighNetwork = x86-net-l1-l2
	LowNetwork = x86-net-l2-l3
	LowModules = x86-l3
	
[Module x86-l3]
	Type = Cache
	Geometry = x86-geo-l3
	HighNetwork = x86-net-l2-l3
	LowNetwork = x86-net-l3-mm
	LowModules = x86-mm

[Module x86-mm]
	Type = MainMemory
	HighNetwork = x86-net-l3-mm
	BlockSize = 512
	Latency = 100



;[CacheGeometry <geo>]
;defines a geometry for a cache. Caches using this
;geometry are instantiated [Module <name>] sections.
;
;  Sets = <num_sets> (Required)
;      Number of sets in the cache.
;  Assoc = <num_ways> (Required)
;      Cache associativity. The total number of blocks contained in the cache
;      is given by the product Sets * Assoc.
;  BlockSize = <size> (Required)
;      Size of a cache block in bytes. The total size of the cache is given by
;      the product Sets * Assoc * BlockSize.
;  Latency = <cycles> (Required)
;      Hit latency for a cache in number of cycles.
;  Policy = {LRU|FIFO|Random} (Default = LRU)
;      Block replacement policy.
;  MSHR = <size> (Default = 16)
;      Miss status holding register (MSHR) size in number of entries. This value
;      determines the maximum number of accesses that can be in flight for the
;      cache, including the time since the access request is received, until a
;      potential miss is resolved.
;  Ports = <num> (Default = 2)
;      Number of ports. The number of ports in a cache limits the number of
;      concurrent hits. If an access is a miss, it remains in the MSHR while it
;      is resolved, but releases the cache port.
;  DirectoryLatency = <cycles> (Default = 1)
;      Latency for a directory access in number of cycles.
;  EnablePrefetcher = {t|f} (Default = False)
;      Whether the hardware should automatically perform prefetching.
;      The prefetcher related options below will be ignored if this is not true.
;  PrefetcherType = {GHB_PC_CS|GHB_PC_DC} (Default GHB_PC_CS)
;      Specify the type of global history buffer based prefetcher to use.
;      GHB_PC_CS - Program Counter indexed, Constant Stride.
;      GHB_PC_DC - Program Counter indexed, Delta Correlation.
;  PrefetcherGHBSize = <size> (Default = 256)
;      The hardware prefetcher does global history buffer based prefetching.
;      This option specifies the size of the global history buffer.
;  PrefetcherITSize = <size> (Default = 64)
;      The hardware prefetcher does global history buffer based prefetching.
;      This option specifies the size of the index table used.
;  PrefetcherLookupDepth = <num> (Default = 2)
;      This option specifies the history (pattern) depth upto which the
;      prefetcher looks at the history to decide when to prefetch.
;
[CacheGeometry x86-geo-l1]
	Sets = 32
	Assoc = 2
	BlockSize = 256
	Latency = 1
	Policy = LRU

[CacheGeometry x86-geo-l2]
	Sets = 64
	Assoc = 4
	BlockSize = 256
	Latency = 10
	Policy = LRU

[CacheGeometry x86-geo-l3]
	Sets = 256
	Assoc = 8
	BlockSize = 256
	Latency = 25
	Policy = LRU



;[Network <net>]
;defines an internal default interconnect, formed of a
;single switch connecting all modules pointing to the network. For every module
;in the network, a bidirectional link is created automatically between the module
;and the switch, together with the suitable input/output buffers in the switch
;and the module.
;
;  DefaultInputBufferSize = <size>
;      Size of input buffers for end nodes (memory modules) and switch.
;  DefaultOutputBufferSize = <size>
;      Size of output buffers for end nodes and switch. 
;  DefaultBandwidth = <bandwidth>
;      Bandwidth for links and switch crossbar in number of bytes per cycle.
;
[Network x86-net-l1-l2]
	DefaultInputBufferSize = 264
	DefaultOutputBufferSize = 264
	DefaultBandwidth = 72

[Network x86-net-l2-l3]
	DefaultInputBufferSize = 264
	DefaultOutputBufferSize = 264
	DefaultBandwidth = 144
	
[Network x86-net-l3-mm]
	DefaultInputBufferSize = 528
	DefaultOutputBufferSize = 528
	DefaultBandwidth = 264

	


;[Entry <name>]
;creates an entry into the memory system. An entry is a
;connection between a CPU core/thread or a GPU compute unit with a module in the
;memory system.
;
;  Arch = { x86 | Evergreen | SouthernIslands | ... }
;      CPU or GPU architecture affected by this entry.
;  Core = <core>
;      CPU core identifier. This is a value between 0 and the number of cores
;      minus 1, as defined in the CPU configuration file. This variable should be
;      omitted for GPU entries.
;  Thread = <thread>
;      CPU thread identifier. Value between 0 and the number of threads per core
;      minus 1. Omitted for GPU entries.
;  ComputeUnit = <id>
;      GPU compute unit identifier. Value between 0 and the number of compute
;      units minus 1, as defined in the GPU configuration file. This variable
;      should be omitted for CPU entries.
;  DataModule = <mod>
;  InstModule = <mod>
;      In architectures supporting separate data/instruction caches, modules used
;      to access memory for each particular purpose.
;  Module = <mod>
;      Module used to access the memory hierarchy. For architectures supporting
;      separate data/instruction caches, this variable can be used instead of
;      'DataModule' and 'InstModule' to indicate that data and instruction caches
;      are unified.
;
[Entry x86-core-0-thread-0]
	Arch = x86
	Core = 0
	Thread = 0
	Module = x86-l1-0
[Entry x86-core-0-thread-1]
	Arch = x86
	Core = 0
	Thread = 1
	Module = x86-l1-0
[Entry x86-core-1-thread-0]
	Arch = x86
	Core = 1
	Thread = 0
	Module = x86-l1-1
[Entry x86-core-1-thread-1]
	Arch = x86
	Core = 1
	Thread = 1
	Module = x86-l1-1
[Entry x86-core-2-thread-0]
	Arch = x86
	Core = 2
	Thread = 0
	Module = x86-l1-2
[Entry x86-core-2-thread-1]
	Arch = x86
	Core = 2
	Thread = 1
	Module = x86-l1-2
;[Entry x86-core-1-thread-0]
;	Arch = x86
;	Core = 1
;	Thread = 0
;	Module = x86-l1-1
;[Entry x86-core-2-thread-0]
;	Arch = x86
;	Core = 2
;	Thread = 0
;	Module = x86-l1-2
;[Entry x86-core-3-thread-0]
;	Arch = x86
;	Core = 3
;	Thread = 0
;	Module = x86-l1-3
